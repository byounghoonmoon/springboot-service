1일차 

Amazon 콘솔 
	icloud-academy
	사이트: https://kcloud-academy.signin.aws.amazon.com/console
	아이디 : admin14
	Region : ap-southeast-1
	비밀번호 : skcc1234!
	액세스 키 ID : AKIAQYU2ROSKRWEUK6UC
	비밀 액세스 키 : Y7FoeCNr2a9m6gKWR2O+9ejoqSXOfdrVa/LqOMre
	ECR주소 : 052937454741.dkr.ecr.ap-southeast-1.amazonaws.com/admin14-my-nginx:v2
	파일 시스템 아이디 : fs-e2231ea3	
	파일 시스템 DNS 이름 : fs-e2231ea3.efs.ap-southeast-1.amazonaws.com
	

GitHub 주소 
	https://github.com/event-storming/container-orchestration/

교육 정리 된곳 
	https://workflowy.com/s/msa/27a0ioMCzlpV04Ib

Ubuntu 18.4 
	skccadmin / skcc1234!
	/etc/apt/sources.list
	apt server를 daum kakao로 변경
	sudo apt-get remove --purge docker-ce 제거

Docker 
	계정 : passionbh
	비밀번호 : metlife00!
	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add
	
	Dockerfile 
	1) FROM : 이미지를 생성할 때 사용할 기반 이미지를 지정
	2) RUN :  이미지를 생성할 때 실행할 코드 지정. 
	3) WORKDIR : 작업 디렉토리 지정. 해당 디렉토리 없을 경우 새로 생성.
	4) COPY : 파일이나 폴더를 이미지에 복사. WORKDIR로 지정한 디렉토리 기준으로 복사 
	5) ENV : 
	6) ENTRYPOINT : 컨테이너를 구동할 때 실행할 명령어 
	
	docker run --name my-nginx -d -p 80:80 nginx
	컨테이너 실행
	--name 컨테이너 명
	-d : 데몬
	-p xx:xx  : 포트포워딩 설정
	nginx : 이미지 명
	
	Docker Image : 이미지 안에는 모든것이 들어가 있음.
	Docker Container : 이미지가 실행된 것 
	
	docker image rm 이미지아이디 
	※ docker ps -a 에 있는 컨테이너도 다 삭제가 되어야함
	

aws configure
액세스 키 , 비킬 키, 리젼, json 입력 

Amazon EKS 생성
eksctl create cluster --name admin14-Cluster --version 1.15 --nodegroup-name standard-workers --node-type t3.medium --nodes 2 --nodes-min 1 --nodes-max 3


kubectl config current-context
kubectl get nodes	
	

Kubernetes 
Pod : 최소 단위

★ Kubernetes Object Model (p.75)

kubectl create deploy my-nginx --image=passionbh/my-nginx:v1


-pod의 더 많은 정보를 보여줌 
kubectl get pod -o wide 

-kubectl deploy 정보
 kubectl get deploy -o wide 

-deploy 삭제
kubectl delete deploy my-nginx
kubectl delete NAME[service/~~~~~]

2일차 

ECR (Elastic  Container Registry)


docker build -t 052937454741.dkr.ecr.ap-southeast-1.amazonaws.com/admin14-my-nginx:v2 .
docker push 052937454741.dkr.ecr.ap-southeast-1.amazonaws.com/admin14-my-nginx:v2
kubectl create deploy admin14-my-nginx --image=052937454741.dkr.ecr.ap-southeast-1.amazonaws.com/admin14-my-nginx:v2
	
052937454741.dkr.ecr.ap-southeast-1.amazonaws.com/admin14-cm-sandbox:v1

AWS 로그인 인증 	
aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 052937454741.dkr.ecr.ap-southeast-1.amazonaws.com
	
노출 시키기	
kubectl expose deploy admin14-my-nginx --type=LoadBalancer --port=80	

☆-, -- 차이 
-  : 약어
-- : 풀네임
	
kubectl Truble shooting 
1. kubectl describe pod pod명
2. kubectl logs -f pod명
3. kubectl exec -it pod명 -- /bin/bash


yaml 파일 관련 
-(대시) 는 배열을 의미

kubectl create -f test

kubectl label nodes ip-192-168-39-207.ap-southeast-1.compute.internal disktype=ssd

ip-192-168-17-63.ap-southeast-1.compute.internal	
	
Pod를 특정 노드에 붙게 할수 있다. (예를 들면 특정 서비스는 IO작업이 많으므로 ssd 로 구성된 노드에 붙힘)
yaml 파일로 관리 가능
nodeSecetor:
	disktype: ssd 

kubectl create -f yaml 파일 
kubectl get pod : Pendding 상태임. 왜냐하면 node에 라벨을 안정해줬기 떄문
kubectl get node 확인후, 주고자 하는 노드에 "disktype=ssd" 라벨 설정.
 - kubectl label nodes ip-192-168-39-207.ap-southeast-1.compute.internal disktype=ssd
그러면 Pendding 상태에서 Running 상태로 변경됨 

metadata:
  name: nginx2
  labels:
    env: test2	
라벨로 pod 검색 가능 
kubectl get pod -l env=test2	
kubectl get pod -l 'env in (test, test2)'
	
★ Annotations
  주석이나, Rollback 시 사용 됨 
	
	kubectl rollout undo deploy nginx-deployment --to-revision 2
	
apply 있으면 Update 없으면 Create
	
kubectl autoscale deployment php-apache --cpu-percent=20 --min=1 --max=10

StorageClass = Provisioner
아마존의 경우, 
스토리지 클래스 정보 확인
kubectl get sc 
EBS 보단 EFS (Elastic File System) : 여러존 접근, 한번에 여러 Pod 접근 가능, 사용한 만큼 볼륨사이즈 결정 및 비용 지불 

	
kubectl create secret generic my-password --from-literal=password=mysqlpassword

3일차 

API Gate Way 

Ingress (L7)
Ingres Controller 설치 필요	

Helm (쿠버네티스 과련 설치 툴)	
	curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash

kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller

★ Ingress Controller EXTYERNAL-IP	
   a7a1ae9551f204d09a91bfbf9cb1a7b3-1153447851.ap-southeast-1.elb.amazonaws.com
   
   
   
   052937454741.dkr.ecr.ap-southeast-1.amazonaws.com
	docker push 052937454741.dkr.ecr.ap-southeast-1.amazonaws.com/admin14-nginx-blue:latest 

aws ecr create-repository --repository-name admin14-nginx-blue --region ap-southeast-1

	
docker login --username AWS -p 	
	
docker login --username AWS -p $(aws ecr get-login-password --region ap-southeast-1) 052937454741.dkr.ecr.ap-southeast-1.amazonaws.com
	
aws ecr create-repository --repository-name admin14-nginx-green --region ap-southeast-1


docker build -t 052937454741.dkr.ecr.ap-southeast-1.amazonaws.com/admin14-nginx-green:latest .


docker push 052937454741.dkr.ecr.ap-southeast-1.amazonaws.com/admin14-nginx-green:latest
			052937454741.dkr.ecr.ap-southeast-1.amazonaws.com/admin14-nginx-green
	
export ECR=052937454741.dkr.ecr.ap-southeast-1.amazonaws.com

	
aws ecr create-repository --repository-name admin14-products --region ap-southeast-1	
docker push ${ECR}/admin-products:latest

kubectl create deploy admin14-products --image=${ECR}/admin14-products:latest
kubectl expose deploy admin14-products --type="ClusterIP" --port=8080

주문
git clone https://github.com/event-storming/reqres_orders.git 
export IMAGENAME=oauth
export IMAGENAME=gateway

export IMAGENAME=admin14-gateway
mvn package -Dmaven.test.skip=true 
docker build -t ${ECR}/${IMAGENAME}:latest .
aws ecr create-repository --repository-name ${IMAGENAME} --region ap-southeast-1
docker push ${ECR}/${IMAGENAME}:latest
kubectl create deploy ${IMAGENAME} --image=${ECR}/${IMAGENAME}:latest
kubectl expose deploy ${IMAGENAME} --type="ClusterIP" --port=8080

_GATEWAY_IP=$(kubectl get -o jsonpath="{.status.loadBalancer.ingress[0].hostname}" svc gateway --ignore-not-found)

_GATEWAY_IP=$(kubectl get -o jsonpath="{.status.loadBalancer.ingress[0].hostname}" svc gateway --ignore-not-found)





	
aba1c4353f1754c04b6b5ebd75750341-659091989.ap-southeast-1.elb.amazonaws.com :16686
aa61a91f11b6f4c2e8eb1dc91c67d904-1680623038.ap-southeast-1.elb.amazonaws.com:20001























	